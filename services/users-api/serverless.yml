service: use-reducer-login-users-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  tracing:
    lambda: true

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-RestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-RestApiRootResourceId

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-UsersTableArn
    - Effect: 'Allow'
      Action:
        - cognito-idp:AdminDisableUser
      Resource:
        - 'Fn::ImportValue': CognitoUserPoolArn-${self:custom.resourcesStage}

functions:
  signup:
    handler: signup.main
    events:
      - cognitoUserPool:
          pool: ${self:custom.resourcesStage}-use-reducer-login-user-pool
          trigger: PostConfirmation
          existing: true
  customMessage:
    handler: custom-message.main
    events:
      - cognitoUserPool:
          pool: ${self:custom.resourcesStage}-use-reducer-login-user-pool
          trigger: CustomMessage
          existing: true
  signin:
    handler: signin.main
    events:
      - cognitoUserPool:
          pool: ${self:custom.resourcesStage}-use-reducer-login-user-pool
          trigger: PostAuthentication
          existing: true
  get:
    handler: get.main
    events:
      - http:
          path: users/me
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: users/me
          method: put
          cors: true
          authorizer: aws_iam
  destroy:
    handler: destroy.main
    events:
      - http:
          path: users/me
          method: delete
          cors: true
          authorizer: aws_iam
